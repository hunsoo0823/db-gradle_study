plugins {
  id 'io.franzbecker.gradle-lombok'    apply false // 'gradle installLombok' for Eclipse

  id 'org.springframework.boot'        apply false
  id 'io.spring.dependency-management' apply false
}

allprojects {
  apply plugin: 'io.spring.dependency-management'
  dependencyManagement {
    imports {
      mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
  }
}

ext {
  springProjects   = subprojects.findAll { project -> project.name =~ /spring/   }
  querydslProjects = subprojects.findAll { project -> project.name =~ /querydsl/ }

  withoutLog4j = { exclude group: 'log4j', module: 'log4j' }
  withoutJunit = { exclude group: 'junit', module: 'junit' }
  withoutLog4jAndJunit = { ['log4j', 'junit'].each { exclude group: it } }
  withoutVintageEngine = { exclude group: 'org.junit.vintage', module: 'junit-vintage-engine' }
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'application'
  apply plugin: 'io.franzbecker.gradle-lombok'

  apply plugin: 'idea'
  apply plugin: 'eclipse'

  idea {
    module.downloadJavadoc = true
  }

  eclipse {
    classpath.downloadJavadoc = true
  }

  application {
    mainClass = project.findProperty('mainClass') ?: 'exercise.App'
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation'  // @SuppressWarnings("deprecation")
    options.compilerArgs << '-Xlint:unchecked'    // @SuppressWarnings("unchecked")
    options.compilerArgs << '-parameters'
  }

  repositories {
    jcenter()
  }

  dependencies {
    // Slf4j
    implementation     'org.slf4j:slf4j-api'
    runtimeOnly        'ch.qos.logback:logback-classic'
    //runtimeOnly      'org.slf4j:jcl-over-slf4j'                     // commons-dbcp2

    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'

    // Hibernate
    implementation     'org.hibernate:hibernate-core'
    implementation     'org.hibernate:hibernate-hikaricp'

    // hibernate.cfg.xml: CamelCaseToSnakeCaseNamingStrategy
    // Jackson, JSON, Postgresql ARRAY, nullable CHAR
    //implementation   'com.vladmihalcea:hibernate-types-52:2.+'

    // Connection Pool
    //runtimeOnly      'com.zaxxer:HikariCP'                          // com.zaxxer.hikari.HikariDataSource
    //runtimeOnly      'org.apache.commons:commons-dbcp2'             // org.apache.commons.dbcp2.BasicDataSource
    //runtimeOnly      'org.apache.tomcat:tomcat-dbcp:9.+'            // org.apache.tomcat.dbcp.dbcp2.BasicDataSource
    //runtimeOnly      'org.apache.tomcat:tomcat-jdbc'                // org.apache.tomcat.jdbc.pool.DataSource

    // Common Library
    //implementation   'org.apache.commons:commons-lang3'             // hashcode(), equals(), randomAscii(), StopWatch
    //implementation   'org.apache.commons:commons-collections4:4.+'  // Map Iteration, HashBag()
    //implementation   'org.apache.commons:commons-math3:3.+'
    implementation     'com.google.guava:guava:29.+'                  // Lists.newArrayList(), Sets.newHashSet()

    // JDBC Driver
    runtimeOnly        'com.h2database:h2'
    runtimeOnly        'org.postgresql:postgresql'
  }
}

// Spring
allprojects {
  dependencies {
    implementation     'org.springframework:spring-context'
    //implementation   'org.springframework:spring-context-support'  // EhCache, Freemarker, Quartz, JavaMail
    implementation     'org.springframework:spring-orm'              // Hibernate, JPA, MyBatis
    implementation     'org.springframework.data:spring-data-jpa'
    //implementation   'org.springframework:spring-jdbc'             // JdbcTemplate
    testImplementation 'org.springframework:spring-test'

    implementation     'net.ttddyy:datasource-proxy:1.+'
  }
}

// QueryDSL
configure(querydslProjects) {
  dependencies {
    // QueryDSL 4
    // Classifier of com.querydsl:querydsl-apt: {general, hibernate, jdo, jpa}
    // http://www.querydsl.com/static/querydsl/latest/reference/html/ch03s03.html

    // QueryDSL JPA
    implementation      'com.querydsl:querydsl-jpa'
    implementation      'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'com.querydsl:querydsl-apt::jpa'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
  }
}

// Test
allprojects {
  test {
    useJUnitPlatform()

    outputs.upToDateWhen {false}
    testLogging {
      events = ['passed', 'skipped', 'failed']
      showStandardStreams = true
      exceptionFormat = 'full'
    }
  }
}

// SQL
allprojects {
  configurations {
    dbtool
  }

  dependencies {
    dbtool 'com.h2database:h2'
    dbtool 'org.hsqldb:hsqldb'
    dbtool 'org.postgresql:postgresql'
  }

  task dbinit(type: JavaExec) {
    group = 'Application'
    description = 'Initializes Database'

    main = 'org.h2.tools.RunScript'
    args   '-url',        jdbcUrl
    args   '-user',       jdbcUsername
    args   '-password',   jdbcPassword
    args   '-script',     'setup.sql'       // default: backup.sql
    args   '-showResults'
    classpath = configurations.dbtool
  }

  task db(type: JavaExec) {
    group = 'Application'
    description = 'Runs DatabaseManagerSwing'

    main = 'org.hsqldb.util.DatabaseManagerSwing'
    args   '--driver',    jdbcDriver
    args   '--url',       jdbcUrl
    args   '--user',      jdbcUsername
    args   '--password',  jdbcPassword
    classpath = configurations.dbtool
  }

  task schema(dependsOn: classes, type: JavaExec) {
    group = 'Application'
    description = 'Generates the database schema from entities'

    main = 'org.hibernate.tool.hbm2ddl.SchemaExport'
    args '--config=hibernate.cfg.xml', '--text', '--format', '--delimiter=;'
    //args '--create'
    args   '--output=schema.sql'
    classpath = sourceSets.main.runtimeClasspath        // dependsOn: classes
  }

  task schemajpa(dependsOn: classes, type: JavaExec) {
    group = 'Application'
    description = 'Generates the database schema from JPA entities'

    main = 'exercise.GenerateJpaSchema'
    classpath = sourceSets.main.runtimeClasspath
  }

}

// Resource Filtering
allprojects {
  tasks.withType(Copy) {
    def props = project.ext.properties.findAll {
      it.key.startsWith('jdbc')      && (it.value instanceof String) ||
      it.key.startsWith('hibernate') && (it.value instanceof String) ||
      it.key.startsWith('jpa')       && (it.value instanceof String)
    }
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: props)
  }

  task printProps {
    group = 'Application'
    description = 'Displays important properties'

    doLast {
      println "jdbcDriver       = ${jdbcDriver}"
      println "jdbcUrl          = ${jdbcUrl}"
      println "jdbcUsername     = ${jdbcUsername}"
      println "jdbcPassword     = ${jdbcPassword}"
      println "jdbcDataSource   = ${jdbcDataSource}"
      println "hibernateDialect = ${hibernateDialect}"
      println "mainClass        = ${application.mainClass.get()}"
    }
  }
}

